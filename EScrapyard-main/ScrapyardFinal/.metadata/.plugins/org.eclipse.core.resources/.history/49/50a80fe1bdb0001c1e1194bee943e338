package com.scrap.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.scrap.dtos.UserLoginDto;
import com.scrap.pojos.Register;
import com.scrap.services.RegisterService;

@CrossOrigin
@RestController
@RequestMapping
public class RegisterController
{
	@Autowired
	private RegisterService registerService;

//find all users 
	@GetMapping("/findalluser")
	public ResponseEntity<?> findAll()
	{
		try
		{
			List<Register> list = registerService.findAll();
			if (list.isEmpty())
				return Response.status(HttpStatus.NOT_FOUND);
			return Response.success(list);
		} catch (Exception e)
		{
			return Response.error(e.getMessage());
		}
	}

//user register
	@PostMapping("/register")
	public ResponseEntity<?> save(@RequestBody Register register)
	{
		try
		{
			Register register1 = registerService.save(register);
			if (register1 == null)
				return Response.status(HttpStatus.NOT_FOUND);

			return Response.success(register1);

		} catch (Exception e)
		{

			return Response.error(e.getMessage());
		}
	}

	// user login
	@GetMapping("/userLogin")
	public ResponseEntity<?> authenticateUser(@RequestBody UserLoginDto userLoginDto)
	{
		try
		{
			Register register1 = registerService.authenticateUser(userLoginDto);
			if (register1 == null)
				return Response.status(HttpStatus.NOT_FOUND);

			return Response.success(register1);

		} catch (Exception e)
		{
			return Response.error(e.getMessage());
		}

	}

	// admin can delete a user
	@DeleteMapping("/user/{id}")
	public ResponseEntity<?> deleteById(@PathVariable int id)
	{
		try
		{
			int noOfRowsDeleted = registerService.deleteById(id);
			if (noOfRowsDeleted == 0)
				return Response.status(HttpStatus.NOT_FOUND);
			return Response.success("no. of rows deleted is " + noOfRowsDeleted);
		} catch (Exception e)
		{
			return Response.error(e.getMessage());
		}
	}

	// user can edit his profile by id
	@PutMapping("/updateUser/{id}")
	public ResponseEntity<?> update(@PathVariable("id") int id, @RequestBody Register register)
	{
		try
		{
			register.setUserId(id);
			Register register1 = registerService.save(register);
			if (register1 == null)
				return Response.status(HttpStatus.NOT_FOUND);
			return Response.success(register1);

		} catch (Exception e)
		{
			return Response.error(e.getMessage());
		}

	}

	// when user will click on forget pw ,email id will be checked in th DB table
	@GetMapping("/user/forgetPwd")
	public ResponseEntity<?> forgetPassword(@RequestBody String email)
	{
		try
		{
			Register register = registerService.findByEmail(email);
			if (register == null)
				return Response.status(HttpStatus.NOT_FOUND);
			return Response.success(register);
		} catch (Exception e)
		{
			return Response.error(e.getMessage());
		}
	}

	// set new pwd for a user
	@PutMapping("/user/setPwd")
	public ResponseEntity<?> update(@RequestBody Register register)
	{
		register.setEmail(register.getEmail());
		register.setPassword(register.getPassword());
		Register register1 = registerService.savePw(register);
		if (register1 == null)
			return Response.status(HttpStatus.NOT_FOUND);
		return Response.success(register1);
	}

	@ExceptionHandler(Exception.class)
	public ResponseEntity<?> exceptionHandler(Exception e)
	{
		System.out.println("Congrats...Exception found....!!!");
		return Response.error(e.getMessage());
	}

}
